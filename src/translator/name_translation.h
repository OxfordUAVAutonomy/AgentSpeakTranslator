/*
This file is part of AgentSpeakTranslator.

Copyright (c) 2015, Samuel Bucheli, Department of Computer Science, University
of Oxford. All rights reserved.

Redistribution and use in source and binary forms, with or without 
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/**
 * @file name_translation.h
 *
 * @brief Various methods keeping track of the translation from names used in AgentSpeak into the names used in C code.
 *
 * @author Samuel Bucheli
 *
 * \TODO Resolve mess, move this into its own class and support more sophisticated name generation, e.g., support rename and avoid name clashes, etc.
 */

#ifndef AGENTSPEAK_NAME_TRANSLATION_H
#define AGENTSPEAK_NAME_TRANSLATION_H

/**
 * @brief Gives the "basic" name of a plan having the given trigger as triggering event. For example, @c +!goto gives @c add_achieve_goto.
 */
std::string get_plan_name(const triggert &trigger);

/**
 * @brief Gives the "basic" name of a plan corresponding to the atom with the give formula type. For goals, addition or deletion can be additional specified by a flag. For example: 
 * - @c !goto gives @c add_achieve_goto with @c add==true, 
 * - @c !goto gives @c del_achieve_goto if @c add==false, 
 * - @c !+percept gives @c add_percept regardless of the flag @c add.
 */
std::string get_plan_name(const atomt &atom, formulatypet type, bool add);

/**
 * @brief Gives the "basic" name of a plan corresponding to the triggering event generated by the given formula. For example, @c !goto gives @c add_achieve_goto.
 */
std::string get_plan_name(const formulat &formula);

/**
 * @brief Gives the name of the function creating, i.e., "triggering" an event corresponding to the given atom and formulatype.
 */
std::string get_trigger_function_name(const atomt &atom, formulatypet type, bool internal);

/**
 * @brief Gives the name of the function creating, i.e., "triggering" an event corresponding to the formula. For example, @c !goto gives @c achieve_goto.
 */
std::string get_trigger_function_name(const formulat &formula, bool internal);

/**
 * @brief Gives the name of the function creating, i.e., "triggering" an event corresponding to this trigger. For example, @c +!goto gives @c achieve_goto. Note that for achievement or test goals, the trigger operation needs to be an add. The new_focus flag can be used to indicate whether the new focus variant should be generated for achievement goals.
 */
std::string get_trigger_function_name(const triggert &trigger, bool internal, bool new_focus);

/**
 * @brief Gives the name of the i-th parameter with the given base name.
 */
std::string get_param_name(std::string name, std::size_t i);

/**
 * @brief Gives the name of the i-th parameter of the given trigger.
 */
std::string get_param_name(const triggert &trigger, std::size_t i);

/**
 * @brief Returns the name of the trigger used in the enum.
 */
std::string get_enum_name(const triggert &trigger);

/**
 * @brief Gives the list of parameters of the given atom, either with or without types.
 */
std::string get_param_list(const atomt &atom, bool with_types=true);

/**
 * @brief Gives the list of types of the given atom.
 */
std::string get_type_list(const atomt &atom);

/**
 * @brief Creates a header gurad name from a given filename.
 */
std::string get_guard_name(std::string name);

/**
 * @brief Returns the ifndef/define part of a header guard with the given custom name.
 */
std::string get_begin_header_guard(std::string name);

/**
 * @brief Returns the endif part of a header guard with the given custom name.
 */
std::string get_end_header_guard(std::string name);

#endif /* AGENTSPEAK_NAME_TRANSLATION_H */
