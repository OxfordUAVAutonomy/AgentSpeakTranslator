settings {
  input = autopilot.asl;
  output = autopilot.c;
  header = autopilot.h;
  basics = actions.h;
};

includes {
  #include <stdbool.h>
  #include "types.h"
};

basics {
  // primitive actions, to be provided by environment
  // Uses the PID Controller to calculate a command that moves the UAV from the first position to the second position. 
  control_commandt calculateMovement(positiont, positiont);
  // Returns true if position is considered “close enough” to target with respect to tolerances given as xyzDist and yawDist.
  bool closeEnough(positiont, positiont, double, double);
  // Returns the current timestamp in milliseconds (provided by ROS).
  int getCurrentTimeMS(void);
  // Returns true if more than waitTime milliseconds have passed since startTime.
  bool longEnough(int, int);
  // Issues a notification to the user using ROS internals.
  void notifyUser(messaget);
  // Sends a takeoff command to the drone, this is a drone internal.
  void sendTakeOff(void);
  // Sends a hover command to the drone, a convenience method for sendGoto with all parameters set to 0 in the control command.
  void sendHover(void);
  // Sends a control command to the drone, this is a drone internal.
  // TODO: rename this one to sendControl
  void sendGoto(control_commandt);
  // Sends a land command to the drone, this is a drone internal.
  void sendLand(void);
  // This provides a hook for the environment to update any beliefs in the belief base of the agent at the beginning of a deliberation cycle.
  void updateBeliefs(void);
};

types {
  // elements of belief base
  initialReachParameters(double, double);
  lastTarget(positiont);
  myPosition(positiont);
  stayTime(int);
  stayWithinParameters(double, double);
  takenOff(void);
  takeOffTime(int);


  // triggering events
  completeTakeOff(int);
  completeGoto(void);
  goto(positiont);
  land(void);
  makeMovement(positiont, positiont);
  stayAtTarget(int);
  takeOff(void);
  waitForCommand(void);
};

settables {
  myPosition;
};

triggerables {
  // achievement goals
  +!goto;
  +!land;
  +!takeOff;

  // percepts
  +initialReachParameters;
  +stayTime;
  +stayWithinParameters;
};

